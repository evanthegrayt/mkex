#!/usr/bin/env bash
# Author:   Evan Gray
# Version:  2.1

print_help() {
    cat <<-____EOF

    === ${0##*/} short help ===

    --- OPTIONS ---
    -e [EDITOR] | requires editor (optional; if one is not passed, checks for
                + environmental variables \$FCEDIT, \$VISUAL and \$EDITOR, then
                + vim)
    -E [PERMS]  | Executability: Files created use 755 permissions by default.
                + This switch allows you to change the permission.
                + NOTE: Use chmod's schema (4=read, 2=write, 1=execute)
    -o [OPTION] | pass an option to be after the interpreter line. For example,
                + adding '-x' to a bash script's interpreter
    -C ........ | Clobber: If file exists, overwrite the file
    -B ........ | No-Clobber: If file exists, report error and exit
    -I ........ | sets Internal Field Separator (IFS) in bash and sh to newline
    -V ........ | Print version and exit

    --- LANGUAGE OPTIONS (one is required) ---
    -l [LANGUAGE]:    | Pass a language name. For common languages, see below.
    -i [INTERPRETER]: | If a language isn't installed or in your path, pass the
                      + interpreter. Only pass the path; ${0##*/} will add the \`#!'
    -n .............. | use /usr/bin/env [LANGUAGE] instead of the interpreter
    -N .............. | Unset 'env' option if you have it in your ~/.${0##*/}rc
    -r .............. | ruby
    -b .............. | bash
    -a .............. | awk
    -d .............. | sed
    -z .............. | zsh
    -f .............. | fish
    -s .............. | sh
    -c .............. | csh
    -k .............. | ksh
    -K .............. | krsh
    -p .............. | python
    -P .............. | php

    --- MORE HELP OPTIONS ---
    -u | print usage
    -h | print this help
    \`man ${0##*/}' for FULL manual

____EOF
    exit 0
}

set_editor() {
    if [[ -n "$VISUAL" ]]; then
        echo "$VISUAL"
    elif [[ -n "$EDITOR" ]]; then
        echo "$EDITOR"
    else
        echo "vim"
    fi
}

abort() {
    local msg="${1:-'Exiting...'}"
    local status=${2:-1}

    echo "$msg"
    exit $status
}

set_interpreter() {
    local interpreter

    local lang=$1
    local env=$2

    if $env; then
        if [[ -x /usr/bin/env ]]; then
            interpreter="/usr/bin/env $lang"
        else
            interpreter="$( which env ) $lang"
        fi
    else
        interpreter=$( which $lang 2>/dev/null )
    fi

    echo "#!$interpreter"
}

handle_clobbering() {
    local file="$1"
    local editor=$2
    local mode=${3:-interactive}

    if [[ -f "$file" ]]; then
        case $mode in
            noclobber)
                echo "[$file] already exists and 'No-Clobber' is set."
                abort "Run with '-h' for help."
                ;;
            clobber)
                rm "$file"
                ;;
            interactive)
                echo "[$file] already exists..."
                read -p "(e)dit it, (o)verwrite it, or e(x)it?: "
                read
                case $REPLY in
                    e|E)
                        echo "Opening $file in $editor."
                        $editor "$file"
                        exit
                        ;;
                    o|O)
                        echo "Overwriting $file"
                        ;;
                    x|X)
                        echo "Exiting..."
                        exit
                        ;;
                    *)
                        abort "Invalid option! Exiting..."
                        ;;
                esac
                ;;
            *)
                abort "Invalid clobbering option called!"
                ;;
        esac
    fi
}

version='${0##*/} 2.1 (May 2017)'
usage="USAGE: ${0##*/} [OPTIONS...] [FILE]"
lcount=0
env=false

[[ -f ~/.${0##*/}rc ]] && source ~/.${0##*/}rc

while getopts "VBzNfshrbcKki:ade:pPCIE:o:l:n" opts
do
    case $opts in
        n)
            env=true
            ;;
        N)
            env=false
            ;;
        l)
            lang=$OPTARG
            (( lcount++ ))

            which "$lang" &>/dev/null || \
                abort "[$lang] is not supported on this system. Exiting..."

            [[ $lang == 'bash' || $lang == 'sh' ||  $lang == 'zsh' ]] && \
                lang_type="shell"
            ;;
        o)
            option=$OPTARG
            if [[ -z "$option" ]]; then
                abort "$usage"
            elif [[ ! "$option" =~ '-' ]]; then
                abort "Option must contain a \'-\'. Exiting..." 1
            else
                option=" $option"
            fi
            ;;
        E)
            perms=$OPTARG
            [[ -n "$perms" ]] || abort "$usage"

            if [[ ! $perms =~ ^[0-9]+$ ]] || (( ${#perms} != 3 )) || \
                [[ $perms != [01234567][01234567][01234567] ]]; then
                echo "-E option should be a number in chmod's format."
                abort "\`man ${0##*/}' for more information." 1
            fi
            ;;
        e)
            editor=$OPTARG
            [[ -n "$editor" ]] || abort "$usage"
            ;;
        P)
            lang="php"
            (( lcount++ ))
            ;;
        r)
            lang="ruby"
            (( lcount++ ))
            ;;
        a)
            lang="awk"
            (( lcount++ ))
            ;;
        d)
            lang="sed"
            (( lcount++ ))
            ;;
        p)
            lang="python"
            (( lcount++ ))
            ;;
        b)
            lang="bash"
            (( lcount++ ))
            lang_type="shell"
            ;;
        z)
            lang="zsh"
            (( lcount++ ))
            lang_type="shell"
            ;;
        f)
            lang="fish"
            (( lcount++ ))
            lang_type="shell"
            ;;
        c)
            lang="csh"
            (( lcount++ ))
            ;;
        C)
            mode="clobber"
            (( lcount++ ))
            ;;
        k)
            lang="krsh"
            (( lcount++ ))
            ;;
        k)
            lang="ksh"
            (( lcount++ ))
            ;;
        s)
            lang="sh"
            (( lcount++ ))
            lang_type="shell"
            ;;
        O)
            mode="interactive"
            ;;
        B)
            mode="noclobber"
            ;;
        i)
            interpreter="#!$OPTARG"
            (( lcount++ ))
            lang='custom'
            ;;
        I)
            ifs="IFS=$'\n'"
            ;;
        V)
            echo $version
            exit
            ;;
        h)
            print_help
            ;;
        u|*)
            echo "$usage"
            exit
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[[ (( $# == 1 )) && -n "$lang" ]] || abort "$usage"

(( $lcount > 1 )) && \
    abort "Only one language can be chosen. \'${0##*/} -h' for help."

file="$1"
editor=${editor:-$(set_editor)}
perms=${perms:-755}

which "$editor" &>/dev/null || \
    abort "Editor [$editor] is not found in your path!"

interpreter="${interpreter:-$(set_interpreter $lang $env)}"

handle_clobbering "$file" $editor $mode

if [[ -n "$ifs" && $lang_type != "shell" ]]; then
    echo "'-I' only compatible with bash, sh and zsh,"
    abort "as it sets the Internal Field Separator." 1
elif [[ $lang == "php" ]]; then
    printf "%s%s\n<?php\n\n?>" "$interpreter" "$option" > "$file"
elif [[ -n "$ifs" && $lang_type == "shell" ]]; then
    printf "%s%s\n%s" "$interpreter" "$option" "$ifs" > "$file"
else
    printf "%s%s\n" "$interpreter" "$option" > "$file"
fi

chmod $perms "$file"
$editor "$file"

